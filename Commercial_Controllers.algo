//Default parameters

    SET column_1 AND column_2 AND column_3 AND column_4 TO battery
    SET battery TO OFF
    SET number_floors TO 66
    SET number_basements TO 6
    SET number_column TO 4
    SET number_elevator TO 12
    SET elevator_status TO IDLE
    SET elevator_A AND elevator_B AND elevator_C TO column 1
    SET elevator_D AND elevator_E AND elevator_F TO column 2
    SET elevator_G AND elevator_H AND elevator_I TO column 3
    SET elevator_J AND elevator_K AND elevator_L TO column 4
    SET column_1 TO basement_1 TO basement_6 ADD ground_floor
    ground_floor equal floor_1
    SET column_2 TO floor_2 TO 20 ADD ground_floor
    SET column_3 TO floor_21 TO 40 ADD ground_floor
    SET column_4 TO floor_41 TO 60 ADD ground_floor
    IF hour EQUAL 7am TO 9am THEN
        SET elevators TO ground_floor
    ELSE 
        SET elevators TO ground_floor
    ENDIF 
    IF hour EQUAL 11am TO 1pm THEN
        SET elevators TO ground_floor
    ELSE 
        SET elevators TO ground_floor
    ENDIF 
    IF hour EQUAL 4pm TO 6pm THEN
        SET elevators TO ground_floor
    ELSE 
        SET elevators TO ground_floor
    ENDIF

    
//Billboard function
    SEQUENCE Billboard USING column AND elevator AND user_input
        READ user is input RETURNING wanted_floor
        RETURN CALL return_column AND return_elevator
    ENDSEQUENCE
//

//Returning column to the billboard
    SEQUENCE return_column USING wanted_floor AND basement AND floor
        CASE user is input OF
            wanted_floor EQUAL basement_1 TO basement_6 :
                RETURN column_1
            wanted_floor EQUAL floor_2 TO floor_20 :
                RETURN column_2
            wanted_floor EQUAL floor_21 TO floor_40 :
                RETURN column_3
            wanted_floor EQUAL floor_41 TO floor_60 :
                RETURN column_4
        ENDCASE
    ENDSEQUENCE
//

//Returning elevator to the billboard
    SEQUENCE return_elevator
        CASE user is input OF 
            wanted_floor EQUAL basement_1 TO basement_6 :
                RETURN elevator_A OR elevator_B OR elevator_C
            wanted_floor EQUAL floor_2 TO floor_20 :
                RETURN elevator_D OR elevator_E OR elevator_F
            wanted_floor EQUAL floor_21 TO floor_40 :
                RETURN elevator_G OR elevator_H OR elevator_I
            wanted_floor EQUAL floor_41 TO floor_60 :
                RETURN elevator_J OR elevator_K OR elevator_L
        ENDCASE
    ENDSEQUENCE
//


//If the user is on floor X and want to go to floor Y
    SEQUENCE user_other_floor USING elevator AND billboard AND elevator_movement AND elevator_direction
        IF user is on floor X AND want TO go TO floor Y THEN  
            CALL elevator RETURNING elevator
            SET elevator_direction TO ground_floor
            SET elevator_movement TO down
            READ current_floors
            IF current_floors EQUAL ground_floor THEN 
                SET elevator_status TO IDLE
                CALL open_doors
                CALL close_doors
            ELSE 
                CONTINUE until current_floors EQUAL ground_floor
            ENDIF
        ELSE 
            BREAK
        ENDIF
        CALL billboard
    ENDSEQUENCE
//

//Floor display function in the elevator
    SEQUENCE floor_display_elevator USING current_floors
        READ current_floors
        RETURN CALL current_floor_display
    ENDSEQUENCE
//

SEQUENCE return_current_floor USING current_floor AND basement AND floor
    CASE diplay current floor
        current_floors EQUAL ground_floor
            RETURN ground_floor
        current_floors EQUAL floor_2
            RETURN floor_2
        current_floors EQUAL floor_3
            RETURN floor_3
        current_floors EQUAL floor_4
            RETURN floor_4
        current_floors EQUAL floor_5
            RETURN floor_5
        current_floors EQUAL floor_6
            RETURN floor_6
        current_floors EQUAL floor_7
            RETURN floor_7
        current_floors EQUAL floor_8
            RETURN floor_8
        current_floors EQUAL floor_9
            RETURN floor_9
        current_floors EQUAL floor_10
            RETURN floor_10
        current_floors EQUAL floor_11
            RETURN floor_11
        current_floors EQUAL floor_12
            RETURN floor_12
        current_floors EQUAL 13
            RETURN floor_13
        current_floors EQUAL floor_14
            RETURN floor_14
        current_floors EQUAL floor_15
            RETURN floor_15
        current_floors EQUAL floor_16
            RETURN floor_16
        current_floors EQUAL floor_17
            RETURN floor_17
        current_floors EQUAL floor_18
            RETURN floor_18
        current_floors EQUAL floor_19
            RETURN floor_19
        current_floors EQUAL floor_20
            RETURN floor_20
        current_floors EQUAL floor_21
            RETURN floor_21
        current_floors EQUAL floor_22
            RETURN floor_22
        current_floors EQUAL floor_23
            RETURN floor_23
        current_floors EQUAL floor_24
            RETURN floor_24
        current_floors EQUAL floor_25
            RETURN floor_25
        current_floors EQUAL floor_26
            RETURN floor_26
        current_floors EQUAL floor_27
            RETURN floor_27
        current_floors EQUAL floor_28
            RETURN floor_28
        current_floors EQUAL floor_29
            RETURN floor_29
        current_floors EQUAL floor_30
            RETURN floor_30
        current_floors EQUAL floor_31
            RETURN floor_31
        current_floors EQUAL floor_32
            RETURN floor_32
        current_floors EQUAL floor_33
            RETURN floor_33
        current_floors EQUAL floor_34
            RETURN floor_34
        current_floors EQUAL floor_35
            RETURN floor_35
        current_floors EQUAL floor_36
            RETURN floor_36
        current_floors EQUAL floor_37
            RETURN floor_37
        current_floors EQUAL floor_38
            RETURN floor_38
        current_floors EQUAL floor_39
            RETURN floor_39
        current_floors EQUAL floor_40
            RETURN floor_40
        current_floors EQUAL floor_41
            RETURN floor_41
        current_floors EQUAL floor_42
            RETURN floor_42
        current_floors EQUAL floor_43
            RETURN floor_43
        current_floors EQUAL floor_44
            RETURN floor_44
        current_floors EQUAL floor_45
            RETURN floor_45
        current_floors EQUAL floor_46
            RETURN floor_46
        current_floors EQUAL floor_47
            RETURN floor_47
        current_floors EQUAL floor_48
            RETURN floor_48
        current_floors EQUAL floor_49
            RETURN floor_49
        current_floors EQUAL floor_50
            RETURN floor_50
        current_floors EQUAL floor_51
            RETURN floor_51
        current_floors EQUAL floor_52
            RETURN floor_52
        current_floors EQUAL floor_53
            RETURN floor_53
        current_floors EQUAL floor_54
            RETURN floor_54
        current_floors EQUAL floor_55
            RETURN floor_55
        current_floors EQUAL floor_56
            RETURN floor_56
        current_floors EQUAL floor_57
            RETURN floor_57
        current_floors EQUAL floor_58
            RETURN floor_58
        current_floors EQUAL floor_59
            RETURN floor_59
        current_floors EQUAL floor_60
            RETURN floor_60
        current_floors EQUAL basement_1
            RETURN basement_1
        current_floors EQUAL basement_2
            RETURN basement_2
        current_floors EQUAL basement_3
            RETURN basement_3
        current_floors EQUAL basement_4
            RETURN basement_4
        current_floors EQUAL basement_5
            RETURN basement_5
        current_floors EQUAL basement_6
            RETURN basement_6
    ENDCASE
ENDSEQUENCE

//


//Open doors function

    SEQUENCE open_doors USING default_floor AND user_emplacement
        SET open_doors TO TRUE IF elevator EQUAL default_floor_A AND default_floor_B AND user_emplacement
    ENDSEQUENCE

//Open doors function

//Close doors function

    SEQUENCE close_doors USING security
        CALL security THEN SET close_doors TO TRUE
    ENDSEQUENCE

//Close doors function


//Battery function
    SEQUENCE battery_function USING elevators AND battery
        IF elevators EQUAL function
            SET battery TO on
        ELSE 
            SET battery TO off
        ENDIF
    ENDSEQUENCE
//

//Maximum load detection

    SEQUENCE max_detection USING maximum_load
        READ total_weight
        IF total_weight EQUAL 1500 KG THEN 
            SET red_light TO TRUE
            STOP picking up user
            DISPLAY "Maximum number of user achieved! No more passenger will be allowed!!"
        ELSE
            SET red_light TO FALSE
            CONTINUE picking up user
        ENDIF
    ENDSEQUENCE
    
//Maximum load detection

//Security movement function

    SEQUENCE security_movement
        IF user enter in elevator THEN
            SET security_movement TO ON
            CALL open_doors
        ELSE 
            SET security_movement TO OFF
            CALL close_doors
        ENDIF
    ENDSEQUENCE

//Security movement function

//Main program
    SEQUENCE main_program
        CALL billboard
        CALL user_other_floor
        SET elevator_status TO movement
        SET elevator_direction TO UP
        WHILE elevator is in movement 
            CALL floor_display_elevator
            READ current_floors
        ENDWHILE
        IF current_floor EQUAL floor_requested THEN
            SET elvator_status TO IDLE
            CALL open_doors
            CALL security_movement
            CALL close_doors
        ELSE 
            continue until current_floor EQUAL floor_requested THEN 
            SET elevator_status TO IDLE
            CALL open_doors
            CALL close_doors
        ENDIF
        RETURN elevator TO ground_floor
    ENDSEQUENCE

//Main program