//PSEUDOCODE

    SEQUENCE origin
        SET elevator_A_status TO IDLE
        SET elevator_A_emplacement TO UNDEFINED
        SET elevator_B_status TO IDLE
        SET elevator_B_emplacement TO UNDEFINED
        IF hour IS between 7am AND 9am THEN
            SET default_floor FOR elevator_A TO second floor
            SET default_floor FOR elevator_B TO sixth floor
        ELSE 
            CALL elevator_A_emplacement AND elevator_B_emplacement
        ENDIF
        IF hour IS between 4pm and 6pm THEN 
            SET default_floor FOR elevator_A TO first floor
            SET default_floor FOR elevator_B TO first floor
        ELSE 
            CALL elevator_A_emplacement AND elevator_B_emplacement
        ENDIF
    ENDSEQUENCE

    SEQUENCE user_calling_button USING elevator AND elevator_A AND elevator_A_status AND user_emplacement AND open_doors
        CALL elevator TO user_emplacement RETURNING elevator SORT BY ranking 
        IF user_emplacement IS GREATER THAN Elevator_A_emplacement OR Elevator_B_emplacement THEN
            elevators_direction EQUAL up
        ELSE 
            elevators_direction EQUAL down
        ENDIF
        WHILE elevator in movement 
            READ number_floor
            IF number_floor EQUAL user_emplacement THEN
                SET elevator_status TO IDLE
                CALL open_doors
                RETURN opening_doors
            ELSE 
                SET elevator_status TO movement
            ENDIF
        ENDWHILE
    ENDSEQUENCE

    SEQUENCE user_into_elevator USING total_weight AND red_light AND picking_up_user AND close_door AND security AND wich_floor AND elevator_status AND number_floor
            READ total_weight
            IF total_weight <= 1275 KG THEN 
                SET red_light TO FALSE
                CONTINUE picking_up_user
            ELSE
                SET red_light TO TRUE
                STOP picking_up_user
                DISPLAY "Maximum number of user achieved! No more passenger will be allowed!!"
            ENDIF
            READ users is input TO floor_requested
            CALL security RETURNING 20 seconds
            RETURN close_door 
            SET elevator_status TO movement
            WHILE elevator in movement
                READ number_floor
                IF number_floor EQUAL floor_requested THEN
                    SET elvator_status TO IDLE
                    SET open_door TO TRUE
                    CALL security RETURNING 20 seconds
                    RETURN close_doors
                ELSE 
                    SET elevator_status TO movement
                ENDIF 
                READ user input
                IF user input EQUAL FALSE THEN
                    CALL origin
                    RETURN origin
                    SET elevator_status TO IDLE
                ELSE 
                    CALL user_calling_button AND user_into_elevator
                    RETURN user_calling_button AND user_into_elevator
                ENDIF
            ENDWHILE
    ENDSEQUENCE

//PSEUDOCODE



//Default parameters
    
    SEQUENCE parameters
        SET default_elevator_A TO UNDEFINED
        SET default_elevator_B TO UNDEFINED
        SET number_of_elevators TO 2
        SET number_of_column TO 1
        SET number_of_floors TO 10
        SET elevators_direction TO NULL
        SET maximum_load TO 1275 kg
        SET user_direction TO NULL
        SET Elevator_A_emplacement TO UNDEFINED
        SET Elevator_B_emplacement TO UNDEFINED
        SET user_emplacement TO UNDEFINED
        SET wanted_floor TO UNDEFINED
        SET open_door TO FALSE
        SET elevator_status TO IDLE
        SET column TO off
        SET security TO decrement OF 20 seconds
    ENDSEQUENCE

//Default parameters

//Traffic hour

    SEQUENCE traffic_set_1 USING default_elevator_A AND default_elevator_B
        IF hour EQUAL 7am TO 9am THEN
            SET default_elevator_A TO second floor
            SET default_elevator_B TO sixth floor
        ELSE 
            CALL default_elevator_A AND default_elevator_B
        ENDIF
    ENDSEQUENCE

    SEQUENCE traffic_set_2 USING default_elevator_A AND default_elevator_B
        IF hour EQUAL 4pm TO 6pm THEN 
            SET default_elevator_A TO first floor
            SET default_elevator_B FOR elevator_B TO first floor
        ELSE 
            CALL default_elevator_A AND default_elevator_B
        ENDIF
    ENDSEQUENCE

//Traffic hour

//Open doors function

    SEQUENCE open_doors USING default_floor AND user_emplacement
        SET open_doors TO TRUE IF elevator EQUAL default_floor_A AND default_floor_B AND user_emplacement
    ENDSEQUENCE

//Open doors function

//Close doors function

    SEQUENCE close_doors USING security
        CALL security THEN SET close_doors TO TRUE
    ENDSEQUENCE

//Close doors function

//External button function

    SEQUENCE external_button USING Elevator_A_emplacement AND Elevator_B_emplacement AND user_emplacement AND elevators_direction
        WHILE user click the button
            READ user is input RETURNING user_emplacement
            CALL elevator RETURNING elevator SORT by ranking
            SET column TO ON
            SET elevator_status TO ON
            IF user_emplacement IS GREATER THAN Elevator_A_emplacement OR Elevator_B_emplacement THEN
                SET elevators_direction TO up
            ELSE 
                SET elevators_direction TO down
            ENDIF
            READ current_floor
            IF current_floor EQUAL user_emplacement
                SET elevator_status TO IDLE
            ELSE 
                CONTINUE UNTIL current_floor EQUAL user_emplacement THEN SET elevators_status TO IDLE
            ENDIF
        ENDWHILE
        CALL open_door
    ENDSEQUENCE

//External button function


//Internal button function

    SEQUENCE internal_button USING wanted_floor
        WHILE internal_button IS clicked
            READ user is input RETURNING wanted_floor
        ENDWHILE
    ENDSEQUENCE

//Internal button function

//Back to origin function

    SEQUENCE back_origin USING elevator_status AND default_floor AND elevator
        IF elevator_status EQUAL IDLE THEN
            CALL default_floor
        ELSE
            SET elevator_status TO In Movement
        ENDIF
    ENDSEQUENCE

//Back to origin function

//Maximum load detection

    SEQUENCE max_detection USING maximum_load
        IF maximum_load >= 1275 KG THEN
            No more passenger accepted
            DISPLAY "Maximum load exceed"
        ELSE
            Continue answering calling button
        ENDIF
    ENDSEQUENCE
    
//Maximum load detection