//Default parameters
    
    SEQUENCE parameters
        SET default_elevator_A TO 1
        SET default_elevator_B TO 10
        SET number_of_elevators TO 2
        SET number_of_column TO 1
        SET number_of_floors TO 10
        SET elevators_direction TO NULL
        SET maximum_load TO 1275 kg
        SET Elevator_A_emplacement TO UNDEFINED
        SET Elevator_B_emplacement TO UNDEFINED
        SET user_emplacement TO NULL
        SET wanted_floor TO NULL
        SET open_door TO FALSE
        SET elevator_status TO IDLE
        SET column TO OFF
        SET security TO decrement OF 20 seconds
        SET security_movement TO OFF
        IF hour EQUAL 7am TO 9am THEN
            SET default_elevator_A TO second floor
            SET default_elevator_B TO sixth floor
        ELSE 
             CALL default_elevator_A AND default_elevator_B
        ENDIF
        IF hour EQUAL 4pm TO 6pm THEN
            SET default_elevator_A TO second floor
            SET default_elevator_B TO sixth floor
        ELSE 
             CALL default_elevator_A AND default_elevator_B
        ENDIF
    ENDSEQUENCE

//Default parameters

//Open doors function

    SEQUENCE open_doors USING default_floor AND user_emplacement
        SET open_doors TO TRUE IF elevator EQUAL default_floor_A AND default_floor_B AND user_emplacement
    ENDSEQUENCE

//Open doors function

//Close doors function

    SEQUENCE close_doors USING security
        CALL security THEN SET close_doors TO TRUE
    ENDSEQUENCE

//Close doors function

//External button function

    SEQUENCE external_button USING Elevator_A_emplacement AND Elevator_B_emplacement AND user_emplacement AND elevators_direction
        WHILE  external button IS click
            CALL elevator RETURNING elevator SORT by rank TO user_emplacement
            SET column TO ON
            SET elevator_status TO ON
            IF user_emplacement IS GREATER THAN Elevator_A_emplacement OR Elevator_B_emplacement THEN
                SET elevators_direction TO up
            ELSE 
                SET elevators_direction TO down
            ENDIF
            READ current_floor
            IF current_floor EQUAL user_emplacement
                SET elevator_status TO IDLE
            ELSE 
                CONTINUE UNTIL current_floor EQUAL user_emplacement THEN SET elevators_status TO IDLE
            ENDIF
        ENDWHILE
        CALL open_door
    ENDSEQUENCE

//External button function

//Security movement function

    SEQUENCE security_movement
        IF user enter in elevator THEN
            SET security_movement TO ON
        ELSE 
            SET security_movement TO OFF
        ENDIF
    ENDSEQUENCE

//Security movement function


//Internal button function

    SEQUENCE internal_button USING wanted_floor
        WHILE internal button IS clicked
            READ user is input RETURNING wanted_floor
        ENDWHILE
    ENDSEQUENCE

//Internal button function

//Back to origin function

    SEQUENCE back_origin USING elevator_status AND default_floor AND elevator
        CALL default_elevator_A AND default_elevator_B IF elevator_status EQUAL IDLE FOR more THAN 10 minutes
    ENDSEQUENCE

//Back to origin function

//Maximum load detection

    SEQUENCE max_detection USING maximum_load
        READ total_weight
        IF total_weight <= 1275 KG THEN 
            SET red_light TO FALSE
            CONTINUE picking up user
        ELSE
            SET red_light TO TRUE
            STOP picking up user
            DISPLAY "Maximum number of user achieved! No more passenger will be allowed!!"
        ENDIF
    ENDSEQUENCE
    
//Maximum load detection

//MAIN PROGRAM
    SEQUENCE main_program
        WHILE user press external button
            CALL external_button
        ENDWHILE
        WHILE user enter in the elevator
            CALL security_movement
            CALL maximum_load
            CALL external_button
        ENDWHILE
        CALL close_doors
        IF user_emplacement IS GREATER THAN wanted_floor THEN
            SET elevators_direction TO down
        ELSE 
            SET elevators_direction TO up
        ENDIF
        WHILE elevator in movement
            READ current_floor
            IF current_floor EQUAL wanted_floor THEN
                SET elvator_status TO IDLE
                CALL open_doors
                CALL security_movement
                CALL close_doors
            ELSE 
                CONTINUE UNTIL current_floor EQUAL wanted_floor THEN SET elevators_status TO IDLE
            ENDIF 
            READ user input TO user press external button
            IF user input EQUAL NONE THEN
                CALL back_origin
            ELSE 
                CALL main_program
            ENDIF
        ENDWHILE
    ENDSEQUENCE